
#  Configure your account
#  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#  ACCOUNT CONFIGURE STEPS: 
#  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
#  Fill in the four fields on lines 30 to 40. During the training video you sent an email_address to us and received an email back. Your secret_id is in that email. 
#  A slack webhook is recommended. See the video chapter on slack webhook creation. If you prefer, you can leave the slack webhook entry empty and as it is. Do not delete the entry. 
#  After entering the four fields, copy these and paste them directly into CloudShell. The script will run immediately. 
#  Allow 5 minutes for this Cloudshell script to complete.

#  E X A M P L E S 

#  Example    your_aws_account="123456781111"	(Your own account number)	

#  Example    sms_number="+1(888)222-8888"  

#  Example    email_address="dave.x@corp.com" 	

#  Example    slack_webhook="https://hooks.slack_webhook.com/services/T09F2DBBCGE/B09F640A79W/aYSRkoQL1H9LrNz1w6giqiAf"		

#  Example    registration_number="123456782222"	(The account registration which we sent you)								

#  Example    secret_id="8ed88a88-dc88-888e-be08-8fe88b85c8ccv" (The secret_id we sent you)							

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#  Add your details here
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

your_aws_account=""

sms_number=""

email_address=""

slack_webhook=""

registration_number=""

secret_id=""



































clear
# -------------------------------------------------------------------------------------------------------------------------
# CloudShell script timer section - leave this section as it is. 
# -------------------------------------------------------------------------------------------------------------------------

tMinus()
(
  IFS=:
  set -- $*
  secs=$(( ${1#0} * 3600 + ${2#0} * 60 + ${3#0} ))
  while [ $secs -gt 0 ]
  do
    sleep 1 &
    printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))
    secs=$(( $secs - 1 ))
    wait
  done
  echo
)
clear



clear

# -------------------------------------------------------------------------------------------------------------------------
# Verification section:
# -------------------------------------------------------------------------------------------------------------------------
clear
SLKISSUES=0
account_error_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 12 characters in the account number, please alter the number and re-run the script."	
sms_num_error_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 10 characters in the sms number, please alter the number and re-run the script."
slack_webhook_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 117 characters in the slack_webhook webhook, please alter the number and re-run the script."
email_address_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> The email_address needs to be altered, please check the syntax of your email_address and re-run the script."
slack_webhook_hkinf=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> example: https://hooks.slack_webhook.com/services/X93RUCBUZNV/B07H80DMUQ0/E4hpCFARxtAt65stR7b0wTyBd275d2ae-2470-4eee-a195-aac04883fdd4"

if [[ $email_address == "" ]] ; then
  clear
  echo "email_address cannot be left blank, add in the email_address and re-run."
  tMinus "00:00:10"
  exit
fi

clear

if [[ $your_aws_account == "" ]] ; then
  clear
  echo "The AWS account number cannot be left blank, add in the 12-digit number and re-run."
  tMinus "00:00:10"
  exit
fi

clear

if [[ $sms_number == "" ]] ; then
  clear
  echo "The SMS number cannot be left blank, add in the +1 USA number and re-run. 50 Federal USA states and protectorates only."
  tMinus "00:00:15"
  exit
fi

clear

if [[ $slack_webhook == "" ]] ; then
  clear
  echo "slack_webhook is empty, however slack_webhook is optional and can be left blank, add this in later if you wish. Continuing with the install ..."
  tMinus "00:00:10"
  exit
fi

clear

# -------------------------------------------------------------------------------------------------------------------------
# Initial verification passed: further tests for expected string values
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

regex="^(([-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~]+|(\"([][,:;<>\&@a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~-]|(\\\\[\\ \"]))+\"))\.)*([-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~]+|(\"([][,:;<>\&@a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~-]|(\\\\[\\ \"]))+\"))@\w((-|\w)*\w)*\.(\w((-|\w)*\w)*\.)*\w{2,4}$"

if [[ $email_address =~ $regex ]] ; then
  echo "email_address ok"
else

  clear
  
  echo
  
  $email_address_check
  tMinus "00:00:10"
  exit
fi

clear

your_aws_account=$(sed 's/[.-]//g' <<< "$your_aws_account")
your_aws_account=$(sed 's/[. ]//g' <<< "$your_aws_account")
echo $your_aws_account
str=$your_aws_account
n=${#str}
echo "Length of the Account number string is : $n "

if [ "$n" -ne 12 ]; then
	clear
        echo $account_error_check
	tMinus "00:00:10"
        exit
fi

clear

sms_number=$(sed 's/[.-]//g' <<< "$sms_number")
sms_number=$(sed 's/[. ]//g' <<< "$sms_number")
sms_number=$(sed 's/[.+]//g' <<< "$sms_number")
sms_number=$(sed 's/[.(]//g' <<< "$sms_number")
sms_number=$(sed 's/[.)]//g' <<< "$sms_number")

echo $sms_number
str=$sms_number
n=${#str}


clear


echo "Length of the SMS Number string is : $n "
if [ "$n" -lt 9 ]; then
    clear
    echo $sms_num_error_check
    	tMinus "00:00:10"
    exit
fi
# email_address regex check ok."
# Account number length ok."
# SMS number minimum length ok."
	tMinus "00:00:02"
	
clear

slack_webhook=$(sed 's/[ ]//g' <<< "$slack_webhook")
echo $slack_webhook
strS=$slack_webhook
n=${#strS}

clear

if [ "$n" -lt 81 ]; then
  $slack_webhook = "xxx-slack_webhook-xxx"
fi

clear

# -------------------------------------------------------------------------------------------------------------------------
# Verification of your contact information was successful:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Setting up the installation:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Pre-clean install - let this process continue to pre-clean the system each time the script runs.
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$your_aws_account:policy/log-read-P
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$your_aws_account:policy/lambda-list-P
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$your_aws_account:policy/log-describe-P

tMinus "00:00:02"
aws iam delete-role --role-name crossP
aws iam delete-policy --policy-arn arn:aws:iam::$your_aws_account:policy/lambda-list-P
aws iam delete-policy --policy-arn arn:aws:iam::$your_aws_account:policy/log-read-P
aws iam delete-policy --policy-arn arn:aws:iam::$your_aws_account:policy/log-describe-P
aws cloudwatch delete-alarms --alarm-names alarm2sns

clear

# -------------------------------------------------------------------------------------------------------------------------
# Pre-configuration is complete:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Secondary account setup is proceeding :
# -------------------------------------------------------------------------------------------------------------------------

aws cloudwatch put-metric-alarm --alarm-name "alarm2sns" --evaluation-periods 1 --threshold 3 --comparison-operator GreaterThanThreshold --alarm-actions arn:aws:lambda:us-east-1:$registration_number:function:fn_loop_client_$your_aws_account --metrics '[{ "Id": "e1", "Expression": "MAX(q1)", "ReturnData": true },{"ReturnData": false, "Id": "q1","Expression": "SELECT SUM(Invocations) \nFROM SCHEMA(\"AWS/Lambda\", FunctionName) \nGROUP BY FunctionName \nORDER BY SUM() DESC", "Period":60}]'
aws iam create-role --role-name crossP --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"Statement1","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::'$registration_number':root"},"Action":"sts:AssumeRole"}]}'
clear

aws iam create-policy --policy-name log-read-P --policy-document '{"Version": "2012-10-17","Statement": [{"Sid": "VisualEditor0","Effect":"Allow","Action":["logs:GetQueryResults","logs:StartQuery","logs:DescribeLogGroups"],"Resource":"*"}]}'
aws iam create-policy --policy-name lambda-list-P --policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"VisualEditor0","Effect":"Allow","Action":"lambda:ListFunctions","Resource":"*"}]}'
aws iam create-policy --policy-name log-describe-P --policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"VisualEditor0","Effect":"Allow","Action":"logs:DescribeLogStreams","Resource":"*"}]}'

aws iam attach-role-policy --policy-arn arn:aws:iam::$your_aws_account:policy/log-read-P --role-name crossP
aws iam attach-role-policy --policy-arn arn:aws:iam::$your_aws_account:policy/lambda-list-P --role-name crossP
aws iam attach-role-policy --policy-arn arn:aws:iam::$your_aws_account:policy/log-describe-P --role-name crossP

tMinus "00:00:02"
clear

slack_webhook=${slack_webhook// /}
your_aws_account=${your_aws_account// /}
email_address=${email_address// /}
sms_number=${sms_number=""// /}
slack_webhook=${slack_webhook////|}

.>"bar $your_aws_account $email_address $sms_number $slack_webhook $secret_id.bar" 2>NUL
aws s3 cp "bar $your_aws_account $email_address $sms_number $slack_webhook $secret_id.bar" s3://loop-invoke-children-$registration_number
tMinus "00:00:10"

.>"foo $your_aws_account $email_address $sms_number $slack_webhook $secret_id.foo" 2>NUL
aws s3 cp "foo $your_aws_account $email_address $sms_number $slack_webhook $secret_id.foo" s3://loop-detector-clients-$registration_number

clear

# -------------------------------------------------------------------------------------------------------------------------
# Initializing account objects - 2 minutes to complete.
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:02:00"

# -------------------------------------------------------------------------------------------------------------------------
# Secondary Setup is starting - 4 minutes to complete.
# -------------------------------------------------------------------------------------------------------------------------

aws cloudwatch disable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:04"
aws cloudwatch enable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:10"
aws cloudwatch set-alarm-state --alarm-name "alarm2sns" --state-value ALARM --state-reason "testing-purposes" --region us-east-1
tMinus "00:01:45"

aws cloudwatch disable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:04"
aws cloudwatch enable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:10"
aws cloudwatch set-alarm-state --alarm-name "alarm2sns" --state-value ALARM --state-reason "testing-purposes" --region us-east-1
tMinus "00:01:45"

# -------------------------------------------------------------------------------------------------------------------------
# A final alarm and permissions assessment is taking place: check your phone for SMS messages in less than one minute.
# Please leave this screen open until the timer ends. 
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:30"

# -------------------------------------------------------------------------------------------------------------------------
# Install has finished - please check for text messages regarding your install. 
# If you do not get Part 1 and Part 2 SMS messages: read the security requirements doc here: 
#
# https://github.com/the-serverless-zone/Loop-plus/blob/main/Policy-requirements.txt
#
# You may need to permissions and run the script again if you are missing either message. 
# If you received Part 1 & Part 2 messages then you are all setup.  
# The Loop+ team thanks you for using this product.

# Copyright (C) May 1st, 2023 Serverless-Zone
# All Rights Reserved
# You may use, distribute and modify this code under the terms of the GNU license.
# For terms please visit : https://www.gnu.org/licenses/gpl-3.0.en.html
