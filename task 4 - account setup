#  T A S K   F O U R  . . .  Loop+ 
 
#  Fill in the four fields on lines 19-22. During the training video you sent an email to us and received one back. Your UUID is in that email. 
#  Slack is recommended. See the video chapter on Slack webhook creation. If you prefer, you can leave the Slack entry empty and as it is. Do not delete the entry. 
#  After entering the four fields, copy these into CloudShell. The script will run immediately. Allow 5 minutes for this Cloudshell script to complete. 
#  Messages will be sent to you to confirm progress.


#  E X A M P L E S 

#  SMSNO="+1(888) 222-8888"                    								<<< 	USA cell phone number of the person who will receive SMS alerts and most setup messages

# "https://hooks.slack.com/services/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"  			<<< 	Your slack webhook

#  UUID="8ed88a88-dc88-888e-be08-8fe88b85c8ccv"  							<<< 	The 36-character uuid or secret id which we supplied you with. Keep yours safe

UUID=""
SMSNO=""
SLACK=""
EMAIL=""




































# -------------------------------------------------------------------------------------------------------------------------
# CloudShell script timer section - leave this section as it is. 
# -------------------------------------------------------------------------------------------------------------------------
ACCID="209938012345"
ACCNO="864917912345"
tMinus()
(
  IFS=:
  set -- $*
  secs=$(( ${1#0} * 3600 + ${2#0} * 60 + ${3#0} ))
  while [ $secs -gt 0 ]
  do
    sleep 1 &
    printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))
    secs=$(( $secs - 1 ))
    wait
  done
  echo
)
clear



clear

# -------------------------------------------------------------------------------------------------------------------------
# Verification section:
# -------------------------------------------------------------------------------------------------------------------------
clear
SLKISSUES=0
account_error_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 12 characters in the account number, please alter the number and re-run the script."	
sms_num_error_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 10 characters in the sms number, please alter the number and re-run the script."
slack_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> There need to be at least 117 characters in the slack webhook, please alter the number and re-run the script."
email_check=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> The email needs to be altered, please check the syntax of your email and re-run the script."
slack_hkinf=">>>>>>>>>>>>>>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> >>>>>>>>>>>>>> example: https://hooks.slack.com/services/X93RUCBUZNV/B07H80DMUQ0/E4hpCFARxtAt65stR7b0wTyBd275d2ae-2470-4eee-a195-aac04883fdd4"

if [[ $EMAIL == "" ]] ; then
  clear
  echo "Email cannot be left blank, add in the email and re-run."
  tMinus "00:00:10"
  exit
fi

clear

if [[ $ACCNO == "" ]] ; then
  clear
  echo "The AWS account number cannot be left blank, add in the 12-digit number and re-run."
  tMinus "00:00:10"
  exit
fi

clear

if [[ $SMSNO == "" ]] ; then
  clear
  echo "The SMS number cannot be left blank, add in the +1 USA number and re-run. 50 Federal USA states and protectorates only."
  tMinus "00:00:15"
  exit
fi

clear

if [[ $SLACK == "" ]] ; then
  clear
  echo "Slack is empty, however slack is optional and can be left blank, add this in later if you wish. Continuing with the install ..."
  tMinus "00:00:10"
  exit
fi

clear

# -------------------------------------------------------------------------------------------------------------------------
# Initial verification passed: further tests for expected string values
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

regex="^(([-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~]+|(\"([][,:;<>\&@a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~-]|(\\\\[\\ \"]))+\"))\.)*([-a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~]+|(\"([][,:;<>\&@a-zA-Z0-9\!#\$%\&\'*+/=?^_\`{\|}~-]|(\\\\[\\ \"]))+\"))@\w((-|\w)*\w)*\.(\w((-|\w)*\w)*\.)*\w{2,4}$"

if [[ $EMAIL =~ $regex ]] ; then
  echo "email ok"
else

  clear
  
  echo
  
  $email_check
  tMinus "00:00:10"
  exit
fi

clear

ACCNO=$(sed 's/[.-]//g' <<< "$ACCNO")
ACCNO=$(sed 's/[. ]//g' <<< "$ACCNO")
echo $ACCNO
str=$ACCNO
n=${#str}
echo "Length of the Account number string is : $n "

if [ "$n" -ne 12 ]; then
	clear
        echo $account_error_check
	tMinus "00:00:10"
        exit
fi

clear

SMSNO=$(sed 's/[.-]//g' <<< "$SMSNO")
SMSNO=$(sed 's/[. ]//g' <<< "$SMSNO")
SMSNO=$(sed 's/[.+]//g' <<< "$SMSNO")
SMSNO=$(sed 's/[.(]//g' <<< "$SMSNO")
SMSNO=$(sed 's/[.)]//g' <<< "$SMSNO")

echo $SMSNO
str=$SMSNO
n=${#str}

clear


echo "Length of the SMS Number string is : $n "
if [ "$n" -lt 9 ]; then
    clear
    echo $sms_num_error_check
    	tMinus "00:00:10"
    exit
fi
# Email regex check ok."
# Account number length ok."
# SMS number minimum length ok."
	tMinus "00:00:02"
	
clear

SLACK=$(sed 's/[ ]//g' <<< "$SLACK")
echo $SLACK
strS=$SLACK
n=${#strS}

clear

if [ "$n" -lt 81 ]; then
  $SLACK = "xxx-SLACK-xxx"
fi

clear

# -------------------------------------------------------------------------------------------------------------------------
# Verification of your contact information was successful:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Setting up the installation:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Pre-clean install - let this process continue to pre-clean the system each time the script runs.
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$ACCNO:policy/log-read-P
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$ACCNO:policy/lambda-list-P
aws iam detach-role-policy --role-name crossP --policy-arn arn:aws:iam::$ACCNO:policy/log-describe-P

tMinus "00:00:02"
aws iam delete-role --role-name crossP
aws iam delete-policy --policy-arn arn:aws:iam::$ACCNO:policy/lambda-list-P
aws iam delete-policy --policy-arn arn:aws:iam::$ACCNO:policy/log-read-P
aws iam delete-policy --policy-arn arn:aws:iam::$ACCNO:policy/log-describe-P
aws cloudwatch delete-alarms --alarm-names alarm2sns

clear

# -------------------------------------------------------------------------------------------------------------------------
# Pre-configuration is complete:
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:02"

clear

# -------------------------------------------------------------------------------------------------------------------------
# Secondary account setup is proceeding :
# -------------------------------------------------------------------------------------------------------------------------

aws cloudwatch put-metric-alarm --alarm-name "alarm2sns" --evaluation-periods 1 --threshold 3 --comparison-operator GreaterThanThreshold --alarm-actions arn:aws:lambda:us-east-1:$ACCID:function:fn_loop_client_$ACCNO --metrics '[{ "Id": "e1", "Expression": "MAX(q1)", "ReturnData": true },{"ReturnData": false, "Id": "q1","Expression": "SELECT SUM(Invocations) \nFROM SCHEMA(\"AWS/Lambda\", FunctionName) \nGROUP BY FunctionName \nORDER BY SUM() DESC", "Period":60}]'
aws iam create-role --role-name crossP --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"Statement1","Effect":"Allow","Principal":{"AWS":"arn:aws:iam::'$ACCID':root"},"Action":"sts:AssumeRole"}]}'
clear

aws iam create-policy --policy-name log-read-P --policy-document '{"Version": "2012-10-17","Statement": [{"Sid": "VisualEditor0","Effect":"Allow","Action":["logs:GetQueryResults","logs:StartQuery","logs:DescribeLogGroups"],"Resource":"*"}]}'
aws iam create-policy --policy-name lambda-list-P --policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"VisualEditor0","Effect":"Allow","Action":"lambda:ListFunctions","Resource":"*"}]}'
aws iam create-policy --policy-name log-describe-P --policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"VisualEditor0","Effect":"Allow","Action":"logs:DescribeLogStreams","Resource":"*"}]}'

aws iam attach-role-policy --policy-arn arn:aws:iam::$ACCNO:policy/log-read-P --role-name crossP
aws iam attach-role-policy --policy-arn arn:aws:iam::$ACCNO:policy/lambda-list-P --role-name crossP
aws iam attach-role-policy --policy-arn arn:aws:iam::$ACCNO:policy/log-describe-P --role-name crossP

tMinus "00:00:02"
clear

SLACK=${SLACK// /}
ACCNO=${ACCNO// /}
EMAIL=${EMAIL// /}
SMSNO=${SMSNO// /}
SLACK=${SLACK////|}

.>"bar $ACCNO $EMAIL $SMSNO $SLACK $UUID.bar" 2>NUL
aws s3 cp "bar $ACCNO $EMAIL $SMSNO $SLACK $UUID.bar" s3://loop-invoke-children-$ACCID
tMinus "00:00:10"

.>"foo $ACCNO $EMAIL $SMSNO $SLACK $UUID.foo" 2>NUL
aws s3 cp "foo $ACCNO $EMAIL $SMSNO $SLACK $UUID.foo" s3://loop-detector-clients-$ACCID

clear

# -------------------------------------------------------------------------------------------------------------------------
# Initializing account objects - 2 minutes to complete.
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:02:00"

# -------------------------------------------------------------------------------------------------------------------------
# Secondary Setup is starting - 4 minutes to complete.
# -------------------------------------------------------------------------------------------------------------------------

aws cloudwatch disable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:04"
aws cloudwatch enable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:10"
aws cloudwatch set-alarm-state --alarm-name "alarm2sns" --state-value ALARM --state-reason "testing-purposes" --region us-east-1
tMinus "00:01:45"

aws cloudwatch disable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:04"
aws cloudwatch enable-alarm-actions --alarm-names "alarm2sns"
tMinus "00:00:10"
aws cloudwatch set-alarm-state --alarm-name "alarm2sns" --state-value ALARM --state-reason "testing-purposes" --region us-east-1
tMinus "00:01:45"

# -------------------------------------------------------------------------------------------------------------------------
# A final alarm and permissions assessment is taking place: check your phone for SMS messages in less than one minute.
# Please leave this screen open until the timer ends. 
# -------------------------------------------------------------------------------------------------------------------------
tMinus "00:00:30"

# -------------------------------------------------------------------------------------------------------------------------
# Install has finished - please check for text messages regarding your install. 
# If you do not get Part 1 and Part 2 SMS messages: read the security requirements doc here: 
#
# https://github.com/the-serverless-zone/Loop-plus/blob/main/Policy-requirements.txt
#
# You may need to permissions and run the script again if you are missing either message. 
# If you received Part 1 & Part 2 messages then you are all setup.  
# The Loop+ team thanks you for using this product.

# Copyright (C) May 1st, 2023 Serverless-Zone
# All Rights Reserved
# You may use, distribute and modify this code under the terms of the GNU license.
# For terms please visit : https://www.gnu.org/licenses/gpl-3.0.en.html

